restart;Digits:=12:
with(plots):
with(plottools):
with(CurveFitting):
with(ExcelTools):
with(linalg):
with(ColorTools):
A := Import("D:\\60 Êîìàðîâà ÇÈ ñòèìóëÿòîð.xlsx");

N1:=rowdim(convert(A,array));
N2:=coldim(convert(A,array));
           AAssignMatrix(%id = 18446745583738700078)
                          N1 := 100304
                            N2 := 1
N:=N1-1; N_nach:=0; N_konech:=N;

T_promegutki_sna:=[
[12.5*3600,12.5*3600+8*3600]
];

#N_nach:=0; N:=1000; N_konech:=N_nach+N;
                          N := 100303
                          N_nach := 0
                       N_konech := 100303
            T_promegutki_sna := [[45000.0, 73800.0]]
if N2=1 then

i:='i':
t[0]:=0:
for i from 1 to N_nach+1 do
t[0]:=t[0]+A[i,1]/1000:
end do:
i:='i':
i:='i':
y[0]:=60/(A[N_nach+1,1]/1000):
for i from N_nach+1 to N_konech do
t[i-N_nach]:=t[i-N_nach-1]+A[i+1,1]/1000:
y[i-N_nach]:=60/(A[i+1,1]/1000):
end do:
i:='i':

else

i:='i':
for i from N_nach to N_konech do
t[i-N_nach]:=A[i+1,1]:
y[i-N_nach]:=A[i+1,2]:
end do:
i:='i':

end if:

i:='i':
j:='j':
while max(seq(abs((y[i+1]-y[i])/(t[i+1]-t[i])),i=0..N-1))>=100 do
i:='i':
j:=0:
for i from 0 to N-1 do
  if (abs(y[i])<200) and (abs((y[i+1]-y[i])/(t[i+1]-t[i]))<100) then
    t[j]:=t[i]:
    y[j]:=y[i]:
    j:=j+1:
  end if:
end do:
N:=j-1;
i:='i':
j:='j':
end do:
N:=N;
i:='i':
j:='j':

i:='i':
yt:=[seq([t[i],y[i]],i=0..N)]:
i:='i':

t[0]:=t[0];
t[N]:=t[N];

i:='i':
j:='j':
ii:=0:
for j from 1 to nops(T_promegutki_sna) do
for i from 0 to N do
 if t[i]>=T_promegutki_sna[j][1] and t[i]<=T_promegutki_sna[j][2] then
  ii:=ii+1:
  T_sna[ii]:=t[i]:
 end if:
end do:
end do:
ii:='ii':
i:='i':
j:='j':
T_sna:=convert(T_sna,list):
                          N := 100203
                     t[0] := 0.668000000000
                   t[100203] := 80300.7400000
#i:='i':
#for i from 1 to N do
#dif_y_t[i]:=(y[i]-y[i-1])/(t[i]-t[i-1]):
#end do:
#i:='i':

#i:='i':
#dif_y_tt:=[seq([t[i],abs(dif_y_t[i])],i=1..N)]:
#i:='i':

#ppp1:=plot(dif_y_tt,color=red,style=point,symbol=point):
#ppp11:=plot(dif_y_tt,color=red):
#display({ppp1,ppp11});
#ppp1:=plot(yt,color=red,style=point,symbol=point):
#ppp11:=plot(yt,color=red):
#display({ppp1,ppp11});
i:='i':
for i from 0 to N do
yy[i]:=y[i]:
end do:
i:='i':

NNN_faz:=proc(B,NN,truefalse) local i, ii, y, v, ppp, lambda, s, j, n, ppp_unique, rvn; global t, yy, N;

NumericEventHandler(invalid_operation = `Heaviside/EventHandler`(value_at_zero = 0)):

#NN:=N;

#+++++++++++++++++++++++++++++++++++++++

if truefalse<>true and truefalse<>false then

 ii:=0:
 i:='i': s:='s':
 for i from 0 to NN-2 do

  y[i]:=round(B*yy[i]): y[i+1]:=round(B*yy[i+1]):
  v[i]:=round(B*(yy[i+1]-yy[i])/(t[i+1]-t[i])): v[i+1]:=round(B*(yy[i+2]-yy[i+1])/(t[i+2]-t[i+1])):

  lambda[i]:=max(abs(y[i+1]-y[i]),abs(v[i+1]-v[i])):
  if lambda[i]<>0 then

  for s from 0 to lambda[i]-1 do

  if abs(y[i+1]-y[i])>abs(v[i+1]-v[i]) then
  ii:=ii+1:
  ppp[ii]:=[y[i]+sign(y[i+1]-y[i])*s-Heaviside(y[i]-y[i+1]),v[i]+trunc((v[i+1]-v[i])*s/lambda[i])-Heaviside(v[i]-v[i+1])]:
  end if:

  if abs(y[i+1]-y[i])<=abs(v[i+1]-v[i]) then
  ii:=ii+1:
  ppp[ii]:=[y[i]+trunc((y[i+1]-y[i])*s/lambda[i])-Heaviside(y[i]-y[i+1]),v[i]+sign(v[i+1]-v[i])*s-Heaviside(v[i]-v[i+1])]:
  end if:

  end do;

  else

  ii:=ii+1:
  ppp[ii]:=[y[i],v[i]]:

  end if:
  y:='y': v:='v': lambda:='lambda':

 end do;
 i:='i': s:='s':

else

#+++++++++++++++++++++++++++++++++++++++

 ii:=0:
 i:='i': s:='s':
 for i from 0 to NN-2 do

 if has(T_sna,t[i])=truefalse then

  y[i]:=round(B*yy[i]): y[i+1]:=round(B*yy[i+1]):
  v[i]:=round(B*(yy[i+1]-yy[i])/(t[i+1]-t[i])): v[i+1]:=round(B*(yy[i+2]-yy[i+1])/(t[i+2]-t[i+1])):

  lambda[i]:=max(abs(y[i+1]-y[i]),abs(v[i+1]-v[i])):
  if lambda[i]<>0 then

  for s from 0 to lambda[i]-1 do

  if abs(y[i+1]-y[i])>abs(v[i+1]-v[i]) then
  ii:=ii+1:
  ppp[ii]:=[y[i]+sign(y[i+1]-y[i])*s-Heaviside(y[i]-y[i+1]),v[i]+trunc((v[i+1]-v[i])*s/lambda[i])-Heaviside(v[i]-v[i+1])]:
  end if:

  if abs(y[i+1]-y[i])<=abs(v[i+1]-v[i]) then
  ii:=ii+1:
  ppp[ii]:=[y[i]+trunc((y[i+1]-y[i])*s/lambda[i])-Heaviside(y[i]-y[i+1]),v[i]+sign(v[i+1]-v[i])*s-Heaviside(v[i]-v[i+1])]:
  end if:

  end do;

  else

  ii:=ii+1:
  ppp[ii]:=[y[i],v[i]]:

  end if:
  y:='y': v:='v': lambda:='lambda':

 end if:

 end do;
 i:='i': s:='s':

end if:

#+++++++++++++++++++++++++++++++++++++++

ppp:=convert(ppp,list):
ppp_unique:=convert(convert(ppp,set),list):

i:='i':
j:='j':
n:='n':
rvn:=[]:
for i from 1 to nops(ppp_unique) do
 n[i]:=numboccur(ppp,[ppp_unique[i]]):
 rvn:=[op(rvn),[ppp_unique[i][1]/B,ppp_unique[i][2]/B,n[i]]]:
end do:
i:='i':
j:='j':
n:='n':

rvn;

end proc:
#NNN_faz(1,10,0);

