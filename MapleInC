// Cardio.cpp: определяет точку входа для консольного приложения.
//

#include "stdafx.h"
#include "iostream"
#include "math.h"
#include <stdlib.h>
#include <stdio.h>
using namespace std;

/*
создаём процедуру
NNN_faz:=proc(B,NN,truefalse) local i, ii, y, v, ppp, lambda, s, j, n, ppp_unique, rvn; global t, yy, N;
*/

void faz(double *yy, double *t, int nn, double b, bool truefalse)	//в nn передаём значение int n = sizeof(rowdim) - 1;
{
	double rvn[100];
	double y[100];
	double v[100];
	double lambda[100];
	double ppp[2];
	double pppUnique[100];
	double n[2];
	int ii, i, s, j;
	if (truefalse != true && truefalse != false) {
		ii = -1;
		s = 0;
		for (i = 0, i < nn - 2; i++) {
			y[i] = round(b*yy[i]);
			y[i + 1] = (b*yy[i + 1]);
			v[i] = round((b*(yy[i + 1] - yy[i])) / ((t[i + 1] - t[i])));
			v[i + 1] = round(b*(yy[i + 2] - yy[i + 1]) / (t[i + 2] - t[i + 1]));
			lambda[i] = max(abs(y[i + 1] - y[i]), abs(v[i + 1] - v[i]));
			if (lambda[i] != 0) {
				for (s = 0; s < lambda[i] - 1; i++) {
					if (abs(y[i + 1] - y[i])>abs(v[i + 1] - v[i])) {
						ii++;
						ppp[ii] = [y[i] + sign(y[i + 1] - y[i])*s]
					}
				}
			}
		}
	}
}


int main()
{
	double t[100];
	double y[100];
	double v[100];
	double yy[100];
	double rowdim[100]; //N1 - strings
	double coldim[100]; //N2 - colons
	double somethingImportant;		//incorrect name
	double tSleep[100]; //T_sna
	int n = sizeof(rowdim) - 1;
	int nInitial = 0; //N_nach
	int nFinal = n; //N_konech
	int j = 0;
	int i = 0;
	int k = 0;
	double max = 0;
	double a = 13; //hours of day
	double b = 8; //hours of night
	int gapSleep[2];
	gapSleep[0] = (int)(a * 3600);
	gapSleep[1] = (int)(gapSleep[0] + b * 3600);


	if (sizeof(coldim)) {
		t[0] = 0;
		for (i = 0; i < nInitial + 1; i++) {
			t[0] = t[0] + rowdim[i] / 1000;
		}
		y[0] = 60 / rowdim[nInitial + 1] / 1000;
		for (i = nInitial + 1; i < nFinal; i++) {
			t[i - nInitial] = t[i - nInitial - 1] + rowdim[i + 1] / 1000;
			y[i - nInitial] = 60 / (rowdim[i + 1] / 1000);
		}
	}
	else {
		for (int i = nInitial; i < nFinal; i++) {
			t[i - nInitial] = rowdim[i + 1];
			y[i - nInitial] = coldim[i + 1];
		}
	}
	for (i = 0; i < n - 1; i++) {
		somethingImportant = abs((y[i + 1] - y[i]) / (t[i + 1] - t[i]));
		if (somethingImportant > max) max = somethingImportant;
	}
	while (max >= 100) {
		for (i = 0; i < n - 1; i++) {
			if (abs(y[i]) < 200 && somethingImportant < 100) {
				t[j] = t[i];
				y[j] = y[i];
				j++;
			}
		}
		n = j - 1;
	}
	n = sizeof(rowdim) - 1;
	/*
	yt:=[seq([t[i],y[i]],i=0..N)]:
	t[0]:=t[0];
	t[N]:=t[N];
	*/
	for (j = 1; j < sizeof(gapSleep); i++) { //nops(gapSleep) from Maple
		for (i = 0; i < n; i++) {
			if (t[i] >= gapSleep[0] && t[i] <= gapSleep[1]) {
				k++;
				tSleep[k] = t[i];
			}
		}
	}
	for (i = 0; i < n; i++) {
		yy[i] = y[i];
	}

	return 0;
}
